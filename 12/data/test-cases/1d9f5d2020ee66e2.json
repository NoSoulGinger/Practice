{"uid":"1d9f5d2020ee66e2","name":"Broken image test","fullName":"tests.test_broken_image.TestBrokenImage#test_broken_image_test","historyId":"98dad747255ac230b870edff623e3795","time":{"start":1687253115720,"stop":1687253115924,"duration":204},"status":"failed","statusMessage":"AssertionError: assert 2 == 0","statusTrace":"self = <test_broken_image.TestBrokenImage object at 0x7f06f22671f0>\n\n    @allure.id(\"TC-07\")\n    @allure.title(\"Broken image test\")\n    def test_broken_image_test(self):\n        BrokenImageCount = 0\n        wait = WebDriverWait(self.browser, 5)\n        images = wait.until(EC.presence_of_all_elements_located((By.TAG_NAME, \"img\")))\n        print(f\"Total number of image on the website are {len(images)}\")\n        for img in images:\n            try:\n                response = requests.get(img.get_attribute('src'), stream=True)\n                if (response.status_code != 200):\n                    print(img.get_attribute('outerHTML') + \" is broken.\")\n                    BrokenImageCount += 1\n            except:\n                print(img.get_attribute('outerHTML') + \" is not broken.\")\n        print(f'The page has {BrokenImageCount} broken images')\n>       assert BrokenImageCount == 0\nE       assert 2 == 0\n\ntests/test_broken_image.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestBrokenImage","time":{"start":1687253114881,"stop":1687253115720,"duration":839},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 2 == 0","statusTrace":"self = <test_broken_image.TestBrokenImage object at 0x7f06f22671f0>\n\n    @allure.id(\"TC-07\")\n    @allure.title(\"Broken image test\")\n    def test_broken_image_test(self):\n        BrokenImageCount = 0\n        wait = WebDriverWait(self.browser, 5)\n        images = wait.until(EC.presence_of_all_elements_located((By.TAG_NAME, \"img\")))\n        print(f\"Total number of image on the website are {len(images)}\")\n        for img in images:\n            try:\n                response = requests.get(img.get_attribute('src'), stream=True)\n                if (response.status_code != 200):\n                    print(img.get_attribute('outerHTML') + \" is broken.\")\n                    BrokenImageCount += 1\n            except:\n                print(img.get_attribute('outerHTML') + \" is not broken.\")\n        print(f'The page has {BrokenImageCount} broken images')\n>       assert BrokenImageCount == 0\nE       assert 2 == 0\n\ntests/test_broken_image.py:42: AssertionError","steps":[],"attachments":[{"uid":"455d0334c5acb422","name":"stdout","source":"455d0334c5acb422.txt","type":"text/plain","size":136}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestBrokenImage::0","time":{"start":1687253115958,"stop":1687253116017,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"as_id","value":"TC-07"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_broken_image"},{"name":"subSuite","value":"TestBrokenImage"},{"name":"host","value":"fv-az1259-112"},{"name":"thread","value":"2363-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_broken_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1d9f5d2020ee66e2.json","parameterValues":[]}